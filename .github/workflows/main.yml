name: Gradle CI/CD

on:
  push:
  pull_request:
    branches: [main]

  workflow_dispatch:

jobs:

  test:
    name: Test - Units & Integrations
    runs-on: ubuntu-20.04
    services:
      postgres_db:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: kt-sejnipwd
          POSTGRES_DB: kt-sejni
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:     
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11
          cache: gradle
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b
      - name: Set the value
        id: step_one
        run: |
          echo "PACKAGE_VERSION=$(./gradlew properties -q | grep "version:" | grep -v "kotlin" | awk '{print $2}')" >> $GITHUB_ENV
      - name: Build with Gradle
        run: ./gradlew build

  sonar:
    name: Static Analysis - SonarCloud Scan
    runs-on: ubuntu-20.04
    needs: [test]
    services:
      postgres_db:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: kt-sejnipwd
          POSTGRES_DB: kt-sejni
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew
      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@e6e38bacfdf1a337459f332974bb2327a31aaf4b      
      - name: SonarCloud Scan
        run: ./gradlew jacocoTestReport
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          directory: ./build/jacocoReport/test/
          name: codecov-sejni
          fail_ci_if_error: true

  docker:
    name: Publish - Docker Hub
    runs-on: ubuntu-20.04
    if: ${{ github.ref == 'refs/heads/main' }}
    needs: [sonar]

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: 11
      - name: New Version
        id: new_version
        run: |
          echo "${{ env.PACKAGE_VERSION }}"
      - name: Docker Login
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Build and Push
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKER_REPO }}:latest
            ${{ secrets.DOCKER_REPO }}:v${{ env.PACKAGE_VERSION }}

  deploy:
    name: Publish - Heroku
    runs-on: ubuntu-20.04
    needs: [docker]
    if: ${{ github.ref == 'refs/heads/main' }}

    steps:
      - uses: actions/checkout@v2  
      - name: Publish app on Heroku
        uses: AkhileshNS/heroku-deploy@v3.12.12
        with:
          heroku_api_key: ${{secrets.HEROKU_API_KEY}}
          heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
          heroku_email: ${{secrets.HEROKU_APP_EMAIL}}

  slack:
    name: Notification - Slack
    runs-on: ubuntu-20.04
    needs: [deploy]

    steps:
      - uses: actions/checkout@v2
      - name: Send Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_CHANNEL: ${{ secrets.SLACK_CHANNEL }}
          SLACK_COLOR: ${{ job.status }}
          SLACK_ICON_EMOJI: ':rocket:'
          SLACK_MESSAGE: 'Build number: ${{ github.run_number }} :rocket: Repository: ${{ github.repository }} was deployed on heroku'
          SLACK_TITLE: 'Yeahhhhhh!!! :sunglasses:'
          SLACK_USERNAME: gitHub-Sejni
